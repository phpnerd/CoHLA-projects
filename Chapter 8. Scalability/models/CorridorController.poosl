//
// Copyright (c) Thomas NÃ¤gele and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
//

process class CorridorController(ActiveHoldTime, ActiveLevel, VacantHoldTime, VacantLevel, RelatedHoldTime, RelatedLevel, Frequency : Real)
ports
messages
variables
  activity : Boolean
  relatedActivity : Boolean
  setpoint : Real
init
  Init()()
methods
  Init()()
    activity := false;
    relatedActivity := false;
    setpoint := 0.0;
    par Off()() and proceed()() rap
  
  Off()()
    setpoint := 0.0;
    delay 0.01;
    sel
      [activity] On()()
    or
      [relatedActivity] Dimmed()()
    les
  
  On()()
    setpoint := ActiveLevel;
    delay 0.01;
    [!activity]
    abort 
      delay ActiveHoldTime;
      Vacant()()
    with (
      [activity]
      On()()
    )
    
  Vacant()()
    setpoint := VacantLevel;
    delay 0.01;
    abort
      delay VacantHoldTime;
      if relatedActivity then Dimmed()()
      else Off()() fi
    with (
      [activity]
      On()()
    )
  
  Dimmed()()
    setpoint := RelatedLevel;
    delay 0.01;
    [!relatedActivity]
    abort
      delay RelatedHoldTime;
      Off()() 
    with 
      sel 
        [relatedActivity]
        Dimmed()()
      or
        [activity]
        On()()
      les
  
  proceed()()
    delay Frequency;
    proceed()()
  

system
instances
  controller : CorridorController(ActiveHoldTime := 30.0, ActiveLevel := 100.0, VacantHoldTime := 15.0, VacantLevel := 50.0, RelatedHoldTime := 600.0, RelatedLevel := 30.0, Frequency := 60.0)
channels
